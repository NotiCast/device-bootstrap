---
- hosts: all
  vars:
    is_armbian: false
    is_dev_mode: true
  gather_facts: false
  tasks:
  - name: Deploy SSH key
    authorized_key:
      key: "{{ lookup('file', item) }}"
      user: pi
    with_fileglob: 'keys/*.pub'

  - name: Deploy SSH key [Root]
    authorized_key:
      key: "{{ lookup('file', item) }}"
      user: root
    with_fileglob: 'keys/*.pub'

  - name: Disable apt-daily.timer for Orange Pi Armbian
    systemd:
      name: apt-daily.timer
      enabled: false
      state: stopped
    when: is_armbian == true

  - name: Update System
    apt:
      update_cache: true
      upgrade: yes

  - name: Install required tools
    apt:
      name: "{{ item }}"
    with_items:
      - python3
      - libpython3-dev
      - libffi-dev
      - python3-pip
      - python3-setuptools
      - python3-wheel
      - ffmpeg

  - name: Disable SSH password authentication
    lineinfile:
      path: /etc/ssh/sshd_config
      regexp: "^PasswordAuthentication"
      line: "PasswordAuthentication no"
    when: is_dev_mode == false

  - name: Fix audio for Orange Pi Zero
    lineinfile:
      path: /boot/armbianEnv.txt
      regexp: "^overlays="
      line: "overlays=usbhost2 usbhost3 analog-codec"
    when: is_armbian == true

  - name: Enable systemd unit to auto-mount flash drives
    block:
    - copy:
        src: automount-flashdrive.service
        dest: /etc/systemd/system/automount-flashdrive.service
    - systemd:
        name: automount-flashdrive.service
        enabled: true

  - name: Enable systemd unit to auto-mount flash drives
    block:
    - copy:
        dest: /etc/clock_speed.conf
        content: |
          CLOCK_SPEED=960000
    - copy:
        src: clock-speed.service
        dest: /etc/systemd/system/clock-speed.service
    - copy:
        src: clock-speed.timer
        dest: /etc/systemd/system/clock-speed.timer
    - systemd:
        name: clock-speed.service
        enabled: true
    - systemd:
        name: clock-speed.timer
        enabled: true

  - name: Install automated update system via ansible-pull
    when: is_dev_mode == false
    block:
    - pip:
        name: ansible
        executable: pip3
    - apt: name=ansible
    - file: path=/etc/ansible state=directory
    - copy:
        dest: /etc/ansible/ansible-pull.env
        content: |
          GIT_REPO=https://github.com/NotiCast/device-bootstrap.git
          GIT_BRANCH=master
          GIT_PATH=/etc/ansible/repos/device-bootstrap
          PLAYBOOK_FILE=/etc/ansible/repos/device-bootstrap/ansible/main.yml
          ANSIBLE_LOCAL_TEMP=/root/.ansible/tmp
          ANSIBLE_REMOTE_TEMP=/root/.ansible/tmp
    - copy:
        dest: /etc/systemd/system/ansible-pull.service
        content: |
          [Unit]
          Description=Run ansible-pull to get system updates
          After=network.target

          [Service]
          EnvironmentFile=/etc/ansible/ansible-pull.env
          ExecStart=/bin/bash -c "/usr/local/bin/ansible-pull \
              -U $GIT_REPO \
              -C $GIT_BRANCH \
              -d $GIT_PATH \
              -c local \
              -i '%H,' \
              $PLAYBOOK_FILE"
          Type=oneshot

          [Install]
          WantedBy=multi-user.target
    - copy:
        dest: /etc/systemd/system/ansible-pull.timer
        content: |
          [Unit]
          Description=Run ansible-pull every half hour

          [Timer]
          OnUnitActiveSec=30m

          [Install]
          WantedBy=timers.target

    - systemd:
        name: ansible-pull.service
        enabled: true
    - systemd:
        name: ansible-pull.timer
        enabled: true
        state: started

  - name: Install user-level update system via ansible-pull
    when: is_dev_mode == false
    block:
    - copy:
        dest: /etc/ansible/ansible-pull-software.env
        content: |
          GIT_REPO=https://github.com/NotiCast/device-bootstrap.git
          GIT_BRANCH=master
          GIT_PATH=/home/pi/device-bootstrap
          PLAYBOOK_FILE=/home/pi/device-bootstrap/ansible/software.yml
          ANSIBLE_LOCAL_TEMP=/home/pi/.ansible/tmp
          ANSIBLE_REMOTE_TEMP=/home/pi/.ansible/tmp
    - copy:
        dest: /etc/systemd/system/ansible-pull-software.service
        content: |
          [Unit]
          Description=Run ansible-pull to get system updates
          After=network.target

          [Service]
          EnvironmentFile=/home/pi/.config/ansible/ansible-pull-software.env
          ExecStart=/bin/bash -c "/usr/local/bin/ansible-pull \
              -U $GIT_REPO \
              -C $GIT_BRANCH \
              -d $GIT_PATH \
              -c local \
              -i '%H,' \
              $PLAYBOOK_FILE"
          Type=oneshot
          User=pi

          [Install]
          WantedBy=multi-user.target
    - copy:
        dest: /etc/systemd/system/ansible-pull-software.timer
        content: |
          [Unit]
          Description=Run ansible-pull every half hour

          [Timer]
          OnUnitActiveSec=30m

          [Install]
          WantedBy=timers.target
    - systemd:
        name: ansible-pull-software.service
        enabled: true
    - systemd:
        name: ansible-pull-software.timer
        enabled: true
        state: started

  - name: Create symlink to systemd unit for NotiCast
    file:
      src: /home/pi/vendor/iot-core/noticast.service
      dest: /etc/systemd/system/noticast.service
      state: link

  - name: Enable systemd for the NotiCast service
    systemd:
      name: noticast.service
      enabled: true
      daemon_reload: true
